name: Create Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: "Custom version (optional, overrides version_type). Format: v1.2.3"
        required: false
        type: string
      is_dev_release:
        description: "Create dev release (format: v0.0.0_1.2.3)"
        required: false
        default: false
        type: boolean
      base_version:
        description: "Base version for dev release (e.g., v1.0.0). Only used if is_dev_release is true"
        required: false
        default: "v0.0.0"
        type: string

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          if [ "${{ inputs.is_dev_release }}" = "true" ]; then
            # Dev release logic
            BASE_VERSION="${{ inputs.base_version }}"
            BASE_VERSION=${BASE_VERSION#v}  # Remove 'v' prefix if present

            if [ "${{ inputs.custom_version }}" != "" ]; then
              # Use custom dev version
              DEV_VERSION="${{ inputs.custom_version }}"
              DEV_VERSION=${DEV_VERSION#v}
            else
              # Calculate dev version bump
              CURRENT="${{ steps.current_version.outputs.current }}"
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

              case "${{ inputs.version_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              DEV_VERSION="$MAJOR.$MINOR.$PATCH"
            fi

            echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v${BASE_VERSION}_${DEV_VERSION}" >> $GITHUB_OUTPUT
            echo "is_dev=true" >> $GITHUB_OUTPUT
          else
            # Regular release logic
            if [ "${{ inputs.custom_version }}" != "" ]; then
              # Use custom version (remove 'v' prefix if present)
              NEW_VERSION="${{ inputs.custom_version }}"
              NEW_VERSION=${NEW_VERSION#v}
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              # Calculate version bump
              CURRENT="${{ steps.current_version.outputs.current }}"
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

              case "${{ inputs.version_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac

              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            fi
            echo "is_dev=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        run: |
          if [ "${{ steps.new_version.outputs.is_dev }}" = "false" ]; then
            npm version ${{ steps.new_version.outputs.version }} --no-git-tag-version
          else
            echo "üìã –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è dev —Ä–µ–ª–∏–∑–∞"
          fi

      - name: Commit version change
        run: |
          if [ "${{ steps.new_version.outputs.is_dev }}" = "false" ]; then
            git add package.json
            git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
            git push origin main
          else
            echo "üìã –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–∏—Ç –¥–ª—è dev —Ä–µ–ª–∏–∑–∞"
          fi

      - name: Create and push tag
        run: |
          git tag ${{ steps.new_version.outputs.tag }}
          git push origin ${{ steps.new_version.outputs.tag }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.tag }}
          release_name: Release ${{ steps.new_version.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            Release ${{ steps.new_version.outputs.tag }}

            ${{ steps.new_version.outputs.is_dev == 'true' && 'üöß **Dev Release** - –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' || 'üöÄ **Stable Release**' }}

            ## Changes
            ${{ steps.new_version.outputs.is_dev == 'true' && format('- Dev version: {0}', steps.new_version.outputs.version) || format('- Version bump from {0} to {1}', steps.current_version.outputs.current, steps.new_version.outputs.version) }}

            ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –†–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è CI.
            ${{ steps.new_version.outputs.is_dev == 'true' && 'Dev —Ä–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å —Ç–µ–≥–æ–º `dev` –≤ npm.' || '–†–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å —Ç–µ–≥–æ–º `latest` –≤ npm.' }}
            –ï—Å–ª–∏ CI –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –Ω–µ—É–¥–∞—á–Ω–æ, —Ç–µ–≥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω.
