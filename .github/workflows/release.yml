name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: "–ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç version_type). –§–æ—Ä–º–∞—Ç: v1.2.3"
        required: false
        type: string
      is_dev_release:
        description: "–°–æ–∑–¥–∞—Ç—å dev —Ä–µ–ª–∏–∑ (—Ñ–æ—Ä–º–∞—Ç: v0.0.0_1.2.3)"
        required: false
        default: false
        type: boolean
      base_version:
        description: "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è dev —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, v1.0.0). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ is_dev_release = true"
        required: false
        default: "v0.0.0"
        type: string

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.new_version.outputs.version }}
      tag: ${{ steps.new_version.outputs.tag }}
      is_dev: ${{ steps.new_version.outputs.is_dev }}
      npm_tag: ${{ steps.new_version.outputs.npm_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        id: new_version
        run: |
          if [ "${{ inputs.is_dev_release }}" = "true" ]; then
            # –õ–æ–≥–∏–∫–∞ dev —Ä–µ–ª–∏–∑–∞
            BASE_VERSION="${{ inputs.base_version }}"
            BASE_VERSION=${BASE_VERSION#v}  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –µ—Å–ª–∏ –µ—Å—Ç—å

            if [ "${{ inputs.custom_version }}" != "" ]; then
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é dev –≤–µ—Ä—Å–∏—é
              DEV_VERSION="${{ inputs.custom_version }}"
              DEV_VERSION=${DEV_VERSION#v}
            else
              # –í—ã—á–∏—Å–ª—è–µ–º dev –≤–µ—Ä—Å–∏—é
              CURRENT="${{ steps.current_version.outputs.current }}"
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

              case "${{ inputs.version_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              DEV_VERSION="$MAJOR.$MINOR.$PATCH"
            fi

            echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v${BASE_VERSION}_${DEV_VERSION}" >> $GITHUB_OUTPUT
            echo "is_dev=true" >> $GITHUB_OUTPUT
            echo "npm_tag=dev" >> $GITHUB_OUTPUT
          else
            # –õ–æ–≥–∏–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞
            if [ "${{ inputs.custom_version }}" != "" ]; then
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –≤–µ—Ä—Å–∏—é
              NEW_VERSION="${{ inputs.custom_version }}"
              NEW_VERSION=${NEW_VERSION#v}
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              # –í—ã—á–∏—Å–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
              CURRENT="${{ steps.current_version.outputs.current }}"
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

              case "${{ inputs.version_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac

              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            fi
            echo "is_dev=false" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ package.json
        run: |
          if [ "${{ steps.new_version.outputs.is_dev }}" = "false" ]; then
            npm version ${{ steps.new_version.outputs.version }} --no-git-tag-version
          else
            echo "üìã –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è dev —Ä–µ–ª–∏–∑–∞"
          fi

      - name: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        run: |
          if [ "${{ steps.new_version.outputs.is_dev }}" = "false" ]; then
            git add package.json
            git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
            git push origin main
          else
            echo "üìã –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–∏—Ç –¥–ª—è dev —Ä–µ–ª–∏–∑–∞"
          fi

      - name: –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥
        run: |
          git tag ${{ steps.new_version.outputs.tag }}
          git push origin ${{ steps.new_version.outputs.tag }}

  verify:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - run: npm ci

      - name: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
        run: |
          npm run verify
          npm run test:coverage

      - name: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false

  publish:
    needs: [prepare-release, verify]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - run: npm ci

      - name: –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
        run: npm run build

      - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é NPM
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ GitHub Secrets!"
            exit 1
          fi
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ npm
        run: |
          if [[ "${{ needs.prepare-release.outputs.is_dev }}" == "true" ]]; then
            echo "üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è dev —Ä–µ–ª–∏–∑–∞ —Å —Ç–µ–≥–æ–º '${{ needs.prepare-release.outputs.npm_tag }}'"
            npm publish --tag ${{ needs.prepare-release.outputs.npm_tag }}
          else
            echo "üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞ —Å —Ç–µ–≥–æ–º '${{ needs.prepare-release.outputs.npm_tag }}'"
            npm publish --tag ${{ needs.prepare-release.outputs.npm_tag }}
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: –°–æ–∑–¥–∞—Ç—å GitHub —Ä–µ–ª–∏–∑
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Release ${{ needs.prepare-release.outputs.tag }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_dev == 'true' }}
          body: |
            Release ${{ needs.prepare-release.outputs.tag }}

            ${{ needs.prepare-release.outputs.is_dev == 'true' && 'üöß **Dev Release** - –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' || 'üöÄ **Stable Release**' }}

            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è
            ${{ needs.prepare-release.outputs.is_dev == 'true' && format('- Dev –≤–µ—Ä—Å–∏—è: {0}', needs.prepare-release.outputs.version) || format('- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ {0}', needs.prepare-release.outputs.version) }}

            ‚úÖ **–°—Ç–∞—Ç—É—Å**: –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!
            üì¶ **NPM**: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å —Ç–µ–≥–æ–º `${{ needs.prepare-release.outputs.npm_tag }}`

  cleanup-on-failure:
    needs: [prepare-release, verify]
    runs-on: ubuntu-latest
    if: failure()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        run: |
          echo "‚ùå CI –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —É–¥–∞–ª—è–µ–º —Ç–µ–≥ ${{ needs.prepare-release.outputs.tag }}"
          git push --delete origin ${{ needs.prepare-release.outputs.tag }} || echo "–¢–µ–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω"

      - name: –û—Ç–∫–∞—Ç–∏—Ç—å –∫–æ–º–º–∏—Ç –≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –±—ã–ª)
        run: |
          if [ "${{ needs.prepare-release.outputs.is_dev }}" = "false" ]; then
            echo "‚Ü©Ô∏è –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–∏—Ç —Å –≤–µ—Ä—Å–∏–µ–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞"
            git reset --hard HEAD~1
            git push --force-with-lease origin main
          else
            echo "üìã –ù–µ—á–µ–≥–æ –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å –¥–ª—è dev —Ä–µ–ª–∏–∑–∞"
          fi
