name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.new_version.outputs.version }}
      tag: ${{ steps.new_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case "${{ inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ package.json
        run: |
          npm version ${{ steps.new_version.outputs.version }} --no-git-tag-version

      - name: –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          git tag ${{ steps.new_version.outputs.tag }}
          git push origin ${{ steps.new_version.outputs.tag }}

  verify:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - run: npm ci

      - name: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
        run: |
          npm run verify
          npm run test:coverage

      - name: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false

  publish:
    needs: [prepare-release, verify]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - run: npm ci

      - name: –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
        run: npm run build

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å NPM –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ GitHub Secrets!"
            exit 1
          fi
          echo "‚úÖ NPM_TOKEN –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: ${#NPM_TOKEN})"
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "üìù .npmrc —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
          cat ~/.npmrc | sed 's/:_authToken=.*/:_authToken=***–°–ö–†–´–¢***/'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ npm
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏..."
          npm whoami || echo "‚ö†Ô∏è npm whoami –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
          echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ package.json (–∏–º—è –∏ –≤–µ—Ä—Å–∏—è):"
          node -e "const pkg = require('./package.json'); console.log('Name:', pkg.name); console.log('Version:', pkg.version);"

          echo "üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ npm..."
          npm publish --access public --tag latest
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: –°–æ–∑–¥–∞—Ç—å GitHub —Ä–µ–ª–∏–∑
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Release ${{ needs.prepare-release.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            üöÄ **Release ${{ needs.prepare-release.outputs.tag }}**

            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è
            - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ ${{ needs.prepare-release.outputs.version }}

            ‚úÖ **–°—Ç–∞—Ç—É—Å**: –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!
            üì¶ **NPM**: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å —Ç–µ–≥–æ–º `latest`

  update-main:
    needs: [prepare-release, publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: –ü—É—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ main
        run: |
          # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –∏ –º–µ—Ä–¥–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ç–µ–≥–∞
          git checkout main
          git merge --no-ff ${{ needs.prepare-release.outputs.tag }} -m "chore: release ${{ needs.prepare-release.outputs.tag }}"
          git push origin main

  cleanup-on-failure:
    needs: [prepare-release, verify]
    runs-on: ubuntu-latest
    if: failure()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        run: |
          echo "‚ùå CI –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —É–¥–∞–ª—è–µ–º —Ç–µ–≥ ${{ needs.prepare-release.outputs.tag }}"
          git push --delete origin ${{ needs.prepare-release.outputs.tag }} || echo "–¢–µ–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω"

      - name: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        run: |
          echo "üßπ –ù–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–ª–∏–∑ - —Ç–µ–≥ ${{ needs.prepare-release.outputs.tag }} —É–∂–µ —É–¥–∞–ª–µ–Ω"
          echo "üìã Main –≤–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å, –æ—Ç–∫–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
